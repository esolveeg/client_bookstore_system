{"remainingRequest":"/root/ahmed/vueJs/systemfinal/node_modules/vue-loader/lib/index.js??vue-loader-options!/root/ahmed/vueJs/systemfinal/src/components/datatable/DataTable.vue?vue&type=template&id=0b587444&scoped=true&","dependencies":[{"path":"/root/ahmed/vueJs/systemfinal/src/components/datatable/DataTable.vue","mtime":1604678924032},{"path":"/root/ahmed/vueJs/systemfinal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/ahmed/vueJs/systemfinal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/root/ahmed/vueJs/systemfinal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/ahmed/vueJs/systemfinal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImNhcmQgYW5pbWF0ZWQgIGZhZGVJblVwICI+CiAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50IiBzdHlsZT0ib3ZlcmZsb3cteDpzY3JvbGwiPgogICAgPGRpdj4KICAgICAgPGRpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0YWJsZUZpbHRlcnMiPgogICAgICAgICAgPGRpdiBjbGFzcz0idGFibGVGaWx0ZXJzLWZsZXgiIHN0eWxlPSJkaXNwbGF5OmZsZXgiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWFyY2gtaW5wdXQtZmllbGQiPgogICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgY2xhc3M9ImlucHV0IgogICAgICAgICAgICAgICAgQGlucHV0PSJkYXRhVGFibGUuc2VhcmNoKCRldmVudC50YXJnZXQudmFsdWUpIgogICAgICAgICAgICAgICAgOnZhbHVlPSJkYXRhVGFibGUucGFyYW1zLnNlYXJjaCIKICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICA6cGxhY2Vob2xkZXI9IiR0KCdzZWFyY2hfdGFibGUnKSIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJpbnB1dC1maWVsZCAiCiAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOjEwMCUiCiAgICAgICAgICAgICAgdi1mb3I9ImZpbHRlciBpbiBzZWxlY3RzIgogICAgICAgICAgICAgIDprZXk9ImZpbHRlci5wYXJhbSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxzZWxlY3QKICAgICAgICAgICAgICAgIGlkPSJicmFuY2hlcyIKICAgICAgICAgICAgICAgIEBjaGFuZ2U9ImRhdGFUYWJsZS5maWx0ZXJEYXRhKCRldmVudC50YXJnZXQudmFsdWUsIGZpbHRlcikiCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJkYXRhVGFibGUucGFyYW1zLmJyYW5jaCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiIGRpc2FibGVkPSJub25lIj57eyAkdCgiYnJhbmNoZXMiKSB9fTwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj57eyAkdCgibm9uZSIpIH19PC9vcHRpb24+CiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJzdG9yZSI+e3sgJHQoInN0b3JlIikgfX08L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24KICAgICAgICAgICAgICAgICAgOnZhbHVlPSJ2YWwuaWQiCiAgICAgICAgICAgICAgICAgIHYtZm9yPSJ2YWwgaW4gZmlsdGVyLmRhdGEiCiAgICAgICAgICAgICAgICAgIDprZXk9InZhbC5pZCIKICAgICAgICAgICAgICAgICAgPnt7IHZhbC5uYW1lIH19PC9vcHRpb24KICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJicmFuY2hlcyI+e3sgJHQoImJyYW5jaGVzIikgfX08L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpdGNoIiB2LWZvcj0iZmlsdGVyIGluIHN3aXRjaGVycyIgOmtleT0iZmlsdGVyLmlkIj4KICAgICAgICAgICAgICA8bGFiZWw+CiAgICAgICAgICAgICAgICB7eyBmaWx0ZXIubmFtZSB9fQogICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgIHR5cGU9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmaWx0ZXIudmFsdWUiCiAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9ImRhdGFUYWJsZS5maWx0ZXJEYXRhKGZpbHRlci52YWx1ZSwgZmlsdGVyKSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGV2ZXIiPjwvc3Bhbj4KICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgIGNsYXNzPSJpbnB1dC1maWVsZCIKICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTAwJSIKICAgICAgICAgICAgICB2LWZvcj0iZmlsdGVyIGluIGRhdGVzIgogICAgICAgICAgICAgIDprZXk9ImZpbHRlci5pZCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGVwaWNrZXItdHJpZ2dlciI+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgaWQ9ImRhdGVwaWNrZXItdHJpZ2dlciIKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IlNlbGVjdCBkYXRlcyIKICAgICAgICAgICAgICAgIC8+CgogICAgICAgICAgICAgICAgPEFpcmJuYlN0eWxlRGF0ZXBpY2tlcgogICAgICAgICAgICAgICAgICA6dHJpZ2dlci1lbGVtZW50LWlkPSInZGF0ZXBpY2tlci10cmlnZ2VyJyIKICAgICAgICAgICAgICAgICAgOm1vZGU9IidyYW5nZSciCiAgICAgICAgICAgICAgICAgIDpmdWxsc2NyZWVuLW1vYmlsZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgOmVuZERhdGU9Im5ldyBEYXRlKCkiCiAgICAgICAgICAgICAgICAgIEBkYXRlLW9uZS1zZWxlY3RlZD0iCiAgICAgICAgICAgICAgICAgICAgdmFsID0+IHsKICAgICAgICAgICAgICAgICAgICAgIGRhdGVPbmVTZWxlY3RlZCh2YWwpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICBAZGF0ZS10d28tc2VsZWN0ZWQ9IgogICAgICAgICAgICAgICAgICAgIHZhbCA9PiB7CiAgICAgICAgICAgICAgICAgICAgICBkYXRlVHdvU2VsZWN0ZWQodmFsKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CgogICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZmllbGQiPgogICAgICAgICAgICA8c2VsZWN0CiAgICAgICAgICAgICAgaWQ9InNob3ciCiAgICAgICAgICAgICAgQGNoYW5nZT0iZGF0YVRhYmxlLmNoYW5nZUNvdW50KCRldmVudC50YXJnZXQudmFsdWUpIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTAiPjEwPC9vcHRpb24+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAiPjIwPC9vcHRpb24+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMzAiPjMwPC9vcHRpb24+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iNTAiPjUwPC9vcHRpb24+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMTAwIj4xMDA8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDAiPjIwMDwvb3B0aW9uPgogICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPGxhYmVsPnt7ICR0KCJzaG93IikgfX08L2xhYmVsPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSBkYXRhLXRhYmxlIj4KICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY2hlY2tib3giPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICBpZD0ic2VsZWN0QWxsIgogICAgICAgICAgICAgICAgICAgIHR5cGU9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRhdGFUYWJsZS5hbGxDaGVja2VkIgogICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9ImRhdGFUYWJsZS5zZWxlY3RBbGwoKSIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgIDwhLS0gPHRoCiAgICAgICAgdi1mb3I9ImNvbHVtbiBpbiBjb2x1bW5zIgogICAgICAgIDprZXk9ImNvbHVtbi5uYW1lIgogICAgICAgIEBjbGljaz0iJGVtaXQoJ3NvcnQnLCBjb2x1bW4ubmFtZSkiCiAgICAgICAgOmNsYXNzPSJzb3J0S2V5ID09PSBjb2x1bW4ubmFtZSA/IHNvcnRPcmRlciA6ICdzb3J0aW5nJyIKICAgICAgICA6c3R5bGU9Iid3aWR0aDonICsgY29sdW1uLndpZHRoICsgJzsnICsgJ2N1cnNvcjpwb2ludGVyOyciCiAgICAgID4KICAgICAgICB7eyAkdChgJHtjb2x1bW4ubGFiZWx9YCkgfX0KICAgICAgPC90aD4gLS0+CgogICAgICAgICAgICAgIDx0aAogICAgICAgICAgICAgICAgdi1mb3I9ImNvbHVtbiBpbiBkYXRhVGFibGUuY29sdW1ucyIKICAgICAgICAgICAgICAgIEBjbGljaz0iZGF0YVRhYmxlLnNvcnQoY29sdW1uKSIKICAgICAgICAgICAgICAgIDprZXk9ImNvbHVtbiIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICB7eyAkdChjb2x1bW4pIH19CiAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICA8dGg+CiAgICAgICAgICAgICAgICB7eyAkdCgiYWN0aW9ucyIpIH19CiAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICA8dGJvZHkgdi1pZj0iIWRhdGFUYWJsZS5pc0xvYWRpbmciPgogICAgICAgICAgICA8ZGl2IHYtaWY9ImRhdGFUYWJsZS50b3RhbFJvd3MgPT0gMCI+CiAgICAgICAgICAgICAge3sgJHQoIm5vLWRhdGEiKSB9fQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgdi1lbHNlCiAgICAgICAgICAgICAgdi1mb3I9InZhbCBpbiBkYXRhVGFibGUuZGF0YSIKICAgICAgICAgICAgICA6a2V5PSJ2YWwuaWQiCiAgICAgICAgICAgICAgOmNsYXNzPSJ7IGRhbmdlcjogdmFsLmRlbGV0ZWRfYXQgIT09IG51bGwgfSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgIDxsYWJlbD4KICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgICAgIHR5cGU9ImNoZWNrYm94IgogICAgICAgICAgICAgICAgICAgIG5hbWU9ImNoZWNrYm94W10iCiAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT0iZGF0YVRhYmxlLnNlbGVjdCgpIgogICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0idmFsW2lkZW50aWZlcl0iCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZGF0YVRhYmxlLmNoZWNrZWRJdGVtcyIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPHNwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgIDx0ZCB2LWZvcj0iY29sdW1uIGluIGRhdGFUYWJsZS5jb2x1bW5zIiA6a2V5PSJjb2x1bW4iPgogICAgICAgICAgICAgICAge3sgdmFsW2NvbHVtbl0gfX0KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIHYtaWY9ImRhdGFUYWJsZS5jYW5WaWV3IgogICAgICAgICAgICAgICAgICBAY2xpY2sucHJldmVudD0iCiAgICAgICAgICAgICAgICAgICAgJHJvdXRlci5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGAke3RhYmxlTmFtZX0udmlld2AsCiAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHsgaWQ6IHBhcnNlSW50KHZhbC5pZCkgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biB3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQgYWN0aW9ucy1idG4gdmlldyIKICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyBoaWRlLW9uLW1lZC1hbmQtdXAgYm9sZCIKICAgICAgICAgICAgICAgICAgICA+cmVtb3ZlX3JlZF9leWU8L2kKICAgICAgICAgICAgICAgICAgPjxzcGFuIGNsYXNzPSJoaWRlLW9uLXNtYWxsLW9ubCB0ZXh0LXdoaXRlIgogICAgICAgICAgICAgICAgICAgID57eyAkdCgicGxhaW5fdmlldyIpIH19CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5yZW1vdmVfcmVkX2V5ZTwvaT48L3NwYW4KICAgICAgICAgICAgICAgICAgPjwvYQogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgdi1pZj0iZGF0YVRhYmxlLmNhbkVkaXQiCiAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PSIKICAgICAgICAgICAgICAgICAgICAkcm91dGVyLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogYCR7dGFibGVOYW1lfS5lZGl0YCwKICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogeyBpZDogdmFsLmlkIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0IGFjdGlvbnMtYnRuIGVkaXQiCiAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMgaGlkZS1vbi1tZWQtYW5kLXVwIGJvbGQiPmVkaXQ8L2kKICAgICAgICAgICAgICAgICAgPjxzcGFuIGNsYXNzPSJoaWRlLW9uLXNtYWxsLW9ubCB0ZXh0LXdoaXRlIgogICAgICAgICAgICAgICAgICAgID57eyAkdCgicGxhaW5fZWRpdCIpIH19CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5lZGl0PC9pPjwvc3BhbgogICAgICAgICAgICAgICAgICA+PC9hCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICB2LWlmPSJ0YWJsZU5hbWUgPT0gJ3RyYW5zYWN0aW9ucycgJiYgdmFsLmFwcHJvdmVkID09IDAiCiAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PSIKICAgICAgICAgICAgICAgICAgICAkcm91dGVyLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogYCR7dGFibGVOYW1lfS5hcHByb3ZlYCwKICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogeyBpZDogdmFsLmlkIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0IGFjdGlvbnMtYnRuIGFwcHJvdmUiCiAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMgaGlkZS1vbi1tZWQtYW5kLXVwIGJvbGQiCiAgICAgICAgICAgICAgICAgICAgPmRvbmVfYWxsPC9pCiAgICAgICAgICAgICAgICAgID48c3BhbiBjbGFzcz0iaGlkZS1vbi1zbWFsbC1vbmwgdGV4dC13aGl0ZSIKICAgICAgICAgICAgICAgICAgICA+e3sgJHQoImFwcHJvdmUiKSB9fQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+ZG9uZV9hbGw8L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgID48L2EKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIHYtaWY9InRhYmxlTmFtZSA9PSAnb3JkZXJzJyAmJiB2YWwuZGVsZXRlZF9hdCA9PSBudWxsIgogICAgICAgICAgICAgICAgICBAY2xpY2sucHJldmVudD0icmVmdW5kT3JkZXIodmFsLmlkKSIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biB3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQgYWN0aW9ucy1idG4gdGVhbCIKICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyBoaWRlLW9uLW1lZC1hbmQtdXAgYm9sZCIKICAgICAgICAgICAgICAgICAgICA+a2V5Ym9hcmRfcmV0dXJuPC9pCiAgICAgICAgICAgICAgICAgID48c3BhbiBjbGFzcz0iaGlkZS1vbi1zbWFsbC1vbmwgdGV4dC13aGl0ZSIKICAgICAgICAgICAgICAgICAgICA+e3sgJHQoInJlZnVuZCIpIH19CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5rZXlib2FyZF9yZXR1cm48L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgID48L2EKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICAgIHYtaWY9ImRhdGFUYWJsZS5jYW5EZWxldGUiCiAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PSIKICAgICAgICAgICAgICAgICAgICBkYXRhVGFibGUuZGVsZXRlKCRtb2RhbCwgeyBpZDogdmFsLmlkLCBuYW1lOiB2YWwubmFtZSB9KQogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0IGFjdGlvbnMtYnRuIGRhbmdlciIKICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyBoaWRlLW9uLW1lZC1hbmQtdXAgYm9sZCI+ZGVsZXRlPC9pCiAgICAgICAgICAgICAgICAgID48c3BhbiBjbGFzcz0iaGlkZS1vbi1zbWFsbC1vbmwgdGV4dC13aGl0ZSIKICAgICAgICAgICAgICAgICAgICA+e3sgJHQoImRlbGV0ZSIpIH19CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5kZWxldGU8L2k+PC9zcGFuCiAgICAgICAgICAgICAgICAgID48L2EKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgPC90Ym9keT4KICAgICAgICAgIDx0Zm9vdCB2LWlmPSJkYXRhVGFibGUudG90YWwgIT09IDAiPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgPHRkPnRvdGFsIDoge3sgZGF0YVRhYmxlLnRvdGFsIH19PC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIDwvdGZvb3Q+CiAgICAgICAgPC90YWJsZT4KICAgICAgICA8dWwgY2xhc3M9InBhZ2luYXRpb24gZmxleC1jZW50ZXIgbXQtMzAiPgogICAgICAgICAgPHNwYW4KICAgICAgICAgICAgY2xhc3M9InBhZ2Utc3RhdGUiCiAgICAgICAgICAgIHYtaWY9IgogICAgICAgICAgICAgIGRhdGFUYWJsZS5wYXJhbXMub2Zmc2V0ICsgMSArIGRhdGFUYWJsZS5wYXJhbXMubm8gPAogICAgICAgICAgICAgICAgZGF0YVRhYmxlLnRvdGFsUm93cwogICAgICAgICAgICAiCiAgICAgICAgICAgID57ewogICAgICAgICAgICAgIGBmcm9tICR7ZGF0YVRhYmxlLnBhcmFtcy5vZmZzZXQgKyAxfSB0byAke2RhdGFUYWJsZS5wYXJhbXMKICAgICAgICAgICAgICAgIC5vZmZzZXQgKwogICAgICAgICAgICAgICAgMSArCiAgICAgICAgICAgICAgICBkYXRhVGFibGUucGFyYW1zLm5vfSBvZiAke2RhdGFUYWJsZS50b3RhbFJvd3N9YAogICAgICAgICAgICB9fQogICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPHNwYW4gY2xhc3M9InBhZ2Utc3RhdGUiIHYtZWxzZQogICAgICAgICAgICA+e3sKICAgICAgICAgICAgICBgZnJvbSAke2RhdGFUYWJsZS5wYXJhbXMub2Zmc2V0ICsgMX0gdG8gJHsKICAgICAgICAgICAgICAgIGRhdGFUYWJsZS50b3RhbFJvd3MKICAgICAgICAgICAgICB9IG9mICR7ZGF0YVRhYmxlLnRvdGFsUm93c31gCiAgICAgICAgICAgIH19CiAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICA8bGkgY2xhc3M9ImZsZXgtY2VudGVyIiBAY2xpY2s9ImRhdGFUYWJsZS5wcmV2KCkiPgogICAgICAgICAgICA8YSBjbGFzcz0iZmxleC1jZW50ZXIiCiAgICAgICAgICAgICAgPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+Y2hldnJvbl9sZWZ0PC9pPjwvYQogICAgICAgICAgICA+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJ3YXZlcy1lZmZlY3QiPgogICAgICAgICAgICA8YT57eyBkYXRhVGFibGUuY3VycmVudFBhZ2UgfX08L2E+CiAgICAgICAgICA8L2xpPgoKICAgICAgICAgIDxsaSBjbGFzcz0iZmxleC1jZW50ZXIiIEBjbGljaz0iZGF0YVRhYmxlLm5leHQoKSI+CiAgICAgICAgICAgIDxhIGNsYXNzPSJmbGV4LWNlbnRlciIKICAgICAgICAgICAgICA+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5jaGV2cm9uX3JpZ2h0PC9pPjwvYQogICAgICAgICAgICA+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CjwvZGl2Pgo="},null]}