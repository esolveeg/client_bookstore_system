{"remainingRequest":"/home/ahmed/ahmedashrafdevv/esolveeg/projects/bookstore_system/client/systemfinal/node_modules/thread-loader/dist/cjs.js!/home/ahmed/ahmedashrafdevv/esolveeg/projects/bookstore_system/client/systemfinal/node_modules/babel-loader/lib/index.js!/home/ahmed/ahmedashrafdevv/esolveeg/projects/bookstore_system/client/systemfinal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ahmed/ahmedashrafdevv/esolveeg/projects/bookstore_system/client/systemfinal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ahmed/ahmedashrafdevv/esolveeg/projects/bookstore_system/client/systemfinal/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ahmed/ahmedashrafdevv/esolveeg/projects/bookstore_system/client/systemfinal/src/App.vue","mtime":1609793655233},{"path":"/home/ahmed/ahmedashrafdevv/esolveeg/projects/bookstore_system/client/systemfinal/node_modules/cache-loader/dist/cjs.js","mtime":1609793563794},{"path":"/home/ahmed/ahmedashrafdevv/esolveeg/projects/bookstore_system/client/systemfinal/node_modules/thread-loader/dist/cjs.js","mtime":1609793585507},{"path":"/home/ahmed/ahmedashrafdevv/esolveeg/projects/bookstore_system/client/systemfinal/node_modules/babel-loader/lib/index.js","mtime":1609793590147},{"path":"/home/ahmed/ahmedashrafdevv/esolveeg/projects/bookstore_system/client/systemfinal/node_modules/cache-loader/dist/cjs.js","mtime":1609793563794},{"path":"/home/ahmed/ahmedashrafdevv/esolveeg/projects/bookstore_system/client/systemfinal/node_modules/vue-loader/lib/index.js","mtime":1609793558535}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <delete-modal2 />\n    <RefundModal />\n    <div\n      id=\"app\"\n      v-if=\"\n        $route.name !== 'login' &&\n          $route.name !== 'notfound' &&\n          $route.name !== 'notallowed' &&\n          $route.name !== 'localstorage' &&\n          $route.name !== 'login2'\n      \"\n    >\n      <delete-modal @submitted=\"submitDeleteModal\" />\n      <multi-delete-modal @submitted=\"submitMultiDeleteModal\" />\n\n      <app-header />\n      <Sidebar />\n      <div id=\"main\" class=\"main-full\">\n        <div class=\"row\">\n          <router-view />\n        </div>\n      </div>\n      <app-footer />\n    </div>\n\n    <div id=\"app\" v-else>\n      <router-view />\n    </div>\n  </div>\n</template>\n\n<script>\nimport AppHeader from \"@/components/layouts/AppHeader.vue\";\nimport AppFooter from \"@/components/layouts/AppFooter.vue\";\n// import Breadcrumbs from \"@/components/layouts/Breadcrumbs.vue\";\nimport Sidebar from \"@/components/layouts/Sidebar.vue\";\nimport DeleteModal from \"@/components/modals/DeleteModal.vue\";\nimport DeleteModal2 from \"@/components/modals/DeleteModal2.vue\";\nimport RefundModal from \"@/components/modals/RefundModal.vue\";\nimport MultiDeleteModal from \"@/components/modals/MultiDeleteModal.vue\";\nimport {\n  deleteRoles,\n  deleteRole,\n  deleteExpense,\n  deleteExpenses,\n  deleteBranch,\n  deleteOrder,\n  deleteOrders,\n  deleteTransaction,\n  deleteTransactions,\n  deleteEmployee,\n  deleteEmployees,\n  deleteBranches,\n  deleteProduct,\n  meQuery,\n  deleteProducts,\n  deleteRecord,\n  deleteRecords,\n  deleteDiscount,\n  deleteDiscounts,\n  deleteCustomer,\n  deleteCustomers,\n  deleteSupplier,\n  deleteSuppliers\n} from \"@/graphql/queries/queries.js\";\nimport M from \"materialize-css\";\nexport default {\n  name: \"app\",\n  store: {\n    id: \"deleted_id\",\n    isPos: \"isPos\",\n    model: \"deleted_model\",\n    ids: \"selected_ids\"\n  },\n  watch: {\n    $route() {\n      this.ids = [];\n      this.id = \"\";\n      this.model = \"\";\n      this.loadSelects();\n    }\n  },\n\n  data() {\n    return {\n      error: \"\",\n      deletedName: \"\",\n      deltedId: \"\"\n    };\n  },\n  computed: {\n    count() {\n      return this.ids.length;\n    }\n  },\n  apollo: {\n    query: meQuery,\n    result({ data: { me } }) {\n      // console.log(me)\n      me.roles.includes(\"pos\") ? this.isPos == true : false;\n      // me.roles.includes('pos') ? this.branch_id == me : false\n    }\n  },\n  methods: {\n    loadSelects() {\n      let selects = document.querySelectorAll(\"select\");\n      let select = document.querySelector(\"#show\");\n      setTimeout(() => {\n        M.FormSelect.init(selects, {});\n        M.FormSelect.init(select, {});\n      }, 2000);\n    },\n    submitDeleteModal() {\n      // //console.log(this.model)\n      // if (this.model == \"user\") {\n      //   this.deleteUser();\n      // }\n      // if (this.model == \"transaction\") {\n      //   this.deleteTransaction();\n      // }\n      // if (this.model == \"employee\") {\n      //   this.deleteEmployee();\n      // }\n      // if (this.model == \"order\") {\n      //   this.deleteOrder();\n      // }\n      // if (this.model == \"product\") {\n      //   this.deleteProduct();\n      // }\n\n      // if (this.model == \"supplier\") {\n      //   this.deleteSupplier();\n      // }\n\n      // if (this.model == \"customer\") {\n      //   this.deleteCustomer();\n      // }\n      // if (this.model == \"discount\") {\n      //   this.deleteDiscount();\n      // }\n      // if (this.model == \"role\") {\n      //   this.deleteRole();\n      //   //this.deleteUser();\n      // }\n      // if (this.model == \"expense\") {\n      //   this.deleteExpense();\n      //   //this.deleteUser();\n      // }\n      // if (this.model == \"branch\") {\n      //   this.deleteBranch();\n      //   //this.deleteUser();\n      // }\n      this.deleteRecord();\n      setTimeout(() => {\n        this.id = \"\";\n      }, 2000);\n    },\n    submitMultiDeleteModal() {\n      // if (this.model == \"user\") {\n      //   this.deleteUsers();\n      // }\n      // if (this.model == \"transaction\") {\n      //   this.deleteTransactions();\n      // }\n      // if (this.model == \"employee\") {\n      //   this.deleteEmployees();\n      // }\n      // if (this.model == \"order\") {\n      //   this.deleteOrders();\n      // }\n      // if (this.model == \"supplier\") {\n      //   this.deleteSuppliers();\n      // }\n\n      // if (this.model == \"customer\") {\n      //   this.deleteCustomers();\n      // }\n      // if (this.model == \"discount\") {\n      //   this.deleteDiscounts();\n      // }\n      // if (this.model == \"product\") {\n      //   this.deleteProducts();\n      // }\n      // if (this.model == \"role\") {\n      //   //console.log(\"888\");\n      //   this.deleteRoles();\n      // }\n      // if (this.model == \"expense\") {\n      //   this.deleteExpenses();\n      //   //this.deleteUser();\n      // }\n      // if (this.model == \"branch\") {\n      //   this.deleteBranches();\n      //   //this.deleteUser();\n      // }\n      this.deleteRecords();\n\n      setTimeout(() => {\n        this.ids = [];\n      }, 2000);\n    },\n    deleteRecord() {\n      this.$apollo\n        .mutate({\n          mutation: deleteRecord,\n          // Parameters\n          variables: {\n            id: this.id,\n            table: this.model\n          }\n        })\n        .then(() => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n    deleteRecords() {\n      this.$apollo\n        .mutate({\n          mutation: deleteRecords,\n          // Parameters\n          variables: {\n            ids: this.ids,\n            table: this.model\n          }\n        })\n        .then(() => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n    deleteUsers() {\n      this.$apollo\n        .mutate({\n          mutation: require(\"@/graphql/mutations/deleteUsers.gql\"),\n          // Parameters\n          variables: {\n            id: this.ids\n          }\n        })\n        .then(() => {\n          M.toast({\n            html:\n              this.$tc(\"plural_user\", this.count, {\n                n: this.count\n              }) +\n              \" \" +\n              this.$t(\"users_deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n    deleteUser() {\n      this.$apollo\n        .mutate({\n          mutation: require(\"@/graphql/mutations/deleteUser.gql\"),\n          // Parameters\n          variables: {\n            id: parseInt(this.id)\n          }\n        })\n        .then(() => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n    deleteRole() {\n      this.$apollo\n        .mutate({\n          mutation: deleteRole,\n          // Parameters\n          variables: {\n            id: parseInt(this.id)\n          }\n        })\n        .then(data => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\", {\n              name: data.data.deleteRole.name\n            }),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n    deleteRoles() {\n      this.$apollo\n        .mutate({\n          mutation: deleteRoles,\n          // Parameters\n          variables: {\n            id: this.ids\n          }\n        })\n        .then(() => {\n          M.toast({\n            html:\n              this.$tc(\"plural_role\", this.count, {\n                n: this.count\n              }) +\n              \" \" +\n              this.$t(\"roles_deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n    deleteExpense() {\n      this.$apollo\n        .mutate({\n          mutation: deleteExpense,\n          // Parameters\n          variables: {\n            id: parseInt(this.id)\n          }\n        })\n        .then(data => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\", {\n              name: data.data.deleteexpense.name\n            }),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n        });\n    },\n    deleteExpenses() {\n      this.$apollo\n        .mutate({\n          mutation: deleteExpenses,\n          // Parameters\n          variables: {\n            id: this.ids\n          }\n        })\n        .then(() => {\n          M.toast({\n            html:\n              this.$tc(\"plural_expense\", this.count, {\n                n: this.count\n              }) +\n              \" \" +\n              this.$t(\"expenses_deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n\n    deleteDiscount() {\n      this.$apollo\n        .mutate({\n          mutation: deleteDiscount,\n          // Parameters\n          variables: {\n            id: parseInt(this.id)\n          }\n        })\n        .then(data => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\", {\n              name: data.data.deleteDiscount.name\n            }),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n        });\n    },\n    deleteDiscounts() {\n      this.$apollo\n        .mutate({\n          mutation: deleteDiscounts,\n          // Parameters\n          variables: {\n            id: this.ids\n          }\n        })\n        .then(() => {\n          M.toast({\n            html:\n              this.$tc(\"plural_discount\", this.count, {\n                n: this.count\n              }) +\n              \" \" +\n              this.$t(\"discounts_deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n    deleteBranch() {\n      this.$apollo\n        .mutate({\n          mutation: deleteBranch,\n          // Parameters\n          variables: {\n            id: parseInt(this.id)\n          }\n        })\n        .then(data => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\", {\n              name: data.data.deletebranch.name\n            }),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n        });\n    },\n    deleteBranches() {\n      this.$apollo\n        .mutate({\n          mutation: deleteBranches,\n          // Parameters\n          variables: {\n            id: this.ids\n          }\n        })\n        .then(() => {\n          M.toast({\n            html:\n              this.$tc(\"plural_expense\", this.count, {\n                n: this.count\n              }) +\n              \" \" +\n              this.$t(\"expenses_deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n        });\n    },\n    deleteProduct() {\n      this.$apollo\n        .mutate({\n          mutation: deleteProduct,\n          // Parameters\n          variables: {\n            id: parseInt(this.id)\n          }\n        })\n        .then(data => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\", {\n              name: data.data.deleteProduct.name\n            }),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n        });\n    },\n    deleteProducts() {\n      this.$apollo\n        .mutate({\n          mutation: deleteProducts,\n          // Parameters\n          variables: {\n            id: this.ids\n          }\n        })\n        .then(() => {\n          M.toast({\n            html:\n              this.$tc(\"plural_product\", this.count, {\n                n: this.count\n              }) +\n              \" \" +\n              this.$t(\"products_deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n\n    deleteCustomer() {\n      this.$apollo\n        .mutate({\n          mutation: deleteCustomer,\n          // Parameters\n          variables: {\n            id: parseInt(this.id)\n          }\n        })\n        .then(data => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\", {\n              name: data.data.deleteCustomer.name\n            }),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n        });\n    },\n    deleteCustomers() {\n      this.$apollo\n        .mutate({\n          mutation: deleteCustomers,\n          // Parameters\n          variables: {\n            id: this.ids\n          }\n        })\n        .then(() => {\n          M.toast({\n            html:\n              this.$tc(\"plural_customer\", this.count, {\n                n: this.count\n              }) +\n              \" \" +\n              this.$t(\"customers_deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n    deleteSupplier() {\n      this.$apollo\n        .mutate({\n          mutation: deleteSupplier,\n          // Parameters\n          variables: {\n            id: parseInt(this.id)\n          }\n        })\n        .then(data => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\", {\n              name: data.data.deleteSupplier.name\n            }),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n        });\n    },\n    deleteSuppliers() {\n      this.$apollo\n        .mutate({\n          mutation: deleteSuppliers,\n          // Parameters\n          variables: {\n            id: this.ids\n          }\n        })\n        .then(() => {\n          M.toast({\n            html:\n              this.$tc(\"plural_supplier\", this.count, {\n                n: this.count\n              }) +\n              \" \" +\n              this.$t(\"suppliers_deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n    deleteEmployee() {\n      this.$apollo\n        .mutate({\n          mutation: deleteEmployee,\n          // Parameters\n          variables: {\n            id: parseInt(this.id)\n          }\n        })\n        .then(data => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\", {\n              name: data.data.deleteEmployee.name\n            }),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n        });\n    },\n    deleteEmployees() {\n      this.$apollo\n        .mutate({\n          mutation: deleteEmployees,\n          // Parameters\n          variables: {\n            id: this.ids\n          }\n        })\n        .then(() => {\n          M.toast({\n            html:\n              this.$tc(\"plural_employee\", this.count, {\n                n: this.count\n              }) +\n              \" \" +\n              this.$t(\"suppliers_deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n    deleteOrder() {\n      this.$apollo\n        .mutate({\n          mutation: deleteOrder,\n          // Parameters\n          variables: {\n            id: parseInt(this.id)\n          }\n        })\n        .then(() => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\", {\n              name: \"order\"\n            }),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n        });\n    },\n    deleteOrders() {\n      this.$apollo\n        .mutate({\n          mutation: deleteOrders,\n          // Parameters\n          variables: {\n            id: this.ids\n          }\n        })\n        .then(() => {\n          M.toast({\n            html:\n              this.$tc(\"plural_orders\", this.count, {\n                n: this.count\n              }) +\n              \" \" +\n              this.$t(\"orders_deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    },\n    deleteTransaction() {\n      this.$apollo\n        .mutate({\n          mutation: deleteTransaction,\n          // Parameters\n          variables: {\n            id: parseInt(this.id)\n          }\n        })\n        .then(() => {\n          M.toast({\n            html: this.$t(\"deleted_successfully\", {\n              name: \"transaction\"\n            }),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n        });\n    },\n    deleteTransactions() {\n      this.$apollo\n        .mutate({\n          mutation: deleteTransactions,\n          // Parameters\n          variables: {\n            id: this.ids\n          }\n        })\n        .then(() => {\n          M.toast({\n            html:\n              this.$tc(\"plural_transaction\", this.count, {\n                n: this.count\n              }) +\n              \" \" +\n              this.$t(\"transactions_deleted_successfully\"),\n            classes: \"success toast\",\n            displayLength: 3000\n          });\n          this.id = \"\";\n          this.model = \"\";\n          this.ids = [];\n          this.deletedName = \"\";\n\n          //this.$router.go(-1);\n        });\n    }\n  },\n\n  components: {\n    //Breadcrumbs,\n    RefundModal,\n    Sidebar,\n    \"app-header\": AppHeader,\n    \"delete-modal\": DeleteModal,\n    \"delete-modal2\": DeleteModal2,\n    \"app-footer\": AppFooter,\n    \"multi-delete-modal\": MultiDeleteModal\n  },\n\n  mounted() {\n    let modals = document.querySelectorAll(\".modal\");\n    M.Modal.init(modals);\n    this.loadSelects();\n    const html = document.querySelector(\"html\");\n    if (localStorage.getItem(\"locale\")) {\n      localStorage.getItem(\"locale\") == \"ar\"\n        ? html.classList.add(\"rtl\")\n        : html.classList.remove(\"rtl\");\n    } else {\n      html.classList.add(\"rtl\");\n    }\n  }\n};\n</script>\n\n<style>\n@import url(\"sass/base/_variables.min.css\");\n@import url(\"sass/base/_base.min.css\");\n@import url(\"sass/base/_animations.min.css\");\n@import url(\"sass/base/_utilites.min.css\");\n@import url(\"sass/base/_rtl.min.css\");\nlabel {\n  font-size: 16px !important;\n}\n.is-danger {\n  color: red;\n}\n</style>\n"],"sourceRoot":"src"}]}